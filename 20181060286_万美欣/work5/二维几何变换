#include<windows.h>
#ifdef __APPLE__
#include <GLUT/glut.h>
#else
#include <GL/glut.h>
#endif
void init (void)

{

glClearColor (1.0, 1.0, 1.0, 0.0);

glMatrixMode (GL_PROJECTION);

gluOrtho2D (-5.0, 5.0, -5.0, 5.0); //设置显示的范围是X:-5.0~5.0, Y:-5.0~5.0

glMatrixMode (GL_MODELVIEW);

}

void drawSquare(int x[3],int y[3],int z[3]) //绘制中心在原点，边长为2的正方形

{
    glClear (GL_COLOR_BUFFER_BIT); //清空

glLoadIdentity(); //将当前矩阵设为单位矩阵

glColor3f (1.0, 0.0, 0.0);

glBegin (GL_POLYGON); //顶点指定需要按逆时针方向

glVertex2f (x[0],x[1]);//左下点

glVertex2f (y[0],y[1]);//右下点

glVertex2f (z[0],z[1]);//右上点

glEnd ( );

}

void  translation(int x[3],int y[3],int z[3])
{
   int a[3][3]={1,0,0,   0,1,0,   2,3,1},i,j,b[3]={0},c[3]={0},d[3]={0};
for (i = 0; i <3; i++)
for (j = 0; j < 3; j++){
b[i] += a[j][i] * x[j];
c[i] += a[j][i] * y[j];
d[i] += a[j][i] * z[j];
}
glLoadIdentity(); //将当前矩阵设为单位矩阵
glColor3f (0.0, 1.0, 0.0);
glBegin (GL_POLYGON); //顶点指定需要按逆时针方向
glVertex2f (b[0],b[1]);//左下点
glVertex2f (c[0],c[1]);//右下点
glVertex2f (d[0],d[1]);//右上点
glEnd ( );
}

void  rotates(int x[3],int y[3],int z[3])
{
   int a[3][3]={0,1,0,   -1,0,0,   -1,2,1},i,j,b[3]={0},c[3]={0},d[3]={0};
for (i = 0; i <3; i++)
for (j = 0; j < 3; j++){
b[i] += a[j][i] * x[j];
c[i] += a[j][i] * y[j];
d[i] += a[j][i] * z[j];
}
glLoadIdentity(); //将当前矩阵设为单位矩阵
glColor3f (0.0, 0.0, 1.0);
glBegin (GL_POLYGON); //顶点指定需要按逆时针方向
glVertex2f (b[0],b[1]);//左下点
glVertex2f (c[0],c[1]);//右下点
glVertex2f (d[0],d[1]);//右上点
glEnd ( );
}

void  symmetric(int x[3],int y[3],int z[3])
{
   int a[3][3]={-1,0,0,   0,-1,0,   0,0,1},i,j,b[3]={0},c[3]={0},d[3]={0};
for (i = 0; i <3; i++)
for (j = 0; j < 3; j++){
b[i] += a[j][i] * x[j];
c[i] += a[j][i] * y[j];
d[i] += a[j][i] * z[j];
}
glLoadIdentity(); //将当前矩阵设为单位矩阵
glColor3f (0.0, 1.0, 1.0);
glBegin (GL_POLYGON); //顶点指定需要按逆时针方向
glVertex2f (b[0],b[1]);//左下点
glVertex2f (c[0],c[1]);//右下点
glVertex2f (d[0],d[1]);//右上点
glEnd ( );
}

void myDraw1 (void)

{
int x[3]={1,1,1},y[3]={1,-1,1},z[3]={-1,-1,1};
drawSquare(x,y,z); //在原点处绘制边长为2红色正方形
translation(x,y,z);
rotates(x,y,z);
symmetric(x,y,z);
glFlush ( );

}



int main (int argc, char** argv)

{

glutInit (&argc, argv);

glutInitDisplayMode (GLUT_SINGLE | GLUT_RGB);

glutInitWindowPosition (0, 0);

glutInitWindowSize (600, 600);

glutCreateWindow ("Rotate and translate");

init();

glutDisplayFunc (myDraw1);

glutMainLoop ( );

}
